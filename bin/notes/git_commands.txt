* git config позволяет изменять адрес электронной почты и имя, привязанные к коммитам Git.
  git config --global user.name "Tara Routray"
  git config --global user.email "dev@tararoutray.com"
* git config --global credential.helper cache избавляет от необходимости вручную вводить имя пользователя и пароль при создании нового коммита.
* git init создает пустой репозиторий (скритая папка) Git, в которой содержатся все объекты и ссылки, используемые Git в истории работы над проектом.
* git add somefile.js добавляет отдельный файл в область подготовленных файлов.
* git add . добавляет все файлы в область подготовленных файлов.
* git rm используется в Git для удаления файлов из индекса и рабочей копии. Она похожа на git add, но она удаляет, а не добавляет файлы для следующего коммита. Можно также использовать маски файлов (например *.js) для удаления всех файлов, соответствующих критерию (git rm dirname/*.html).
* git status показывает состояния файлов в рабочем каталоге и индексе: какие файлы изменены, но не добавлены в индекс; какие ожидают коммита в индексе. Вдобавок к этому выводятся подсказки о том, как изменить состояние файлов.
* git diff используется для просматра списка изменений, внесённых в репозиторий. По умолчанию отображаются только изменения, не подготовленные для фиксации. Для просмотра подготовленных изменений необходимо добавить флаг --staged (git diff --staged). Также можно указать имя файла как параметр и просмотреть изменения, внесённые только в этот файл (git diff somefile.js).
* git commit берёт все данные, добавленные в индекс с помощью git add, и сохраняет их слепок во внутренней базе данных, а затем сдвигает указатель текущей ветки на этот слепок.
 При создании коммита в репозитории можно добавить однострочное сообщение с помощью параметра commit с флагом -m. Само сообщение вводится непосредственно после флага, в кавычках (git commit -m "Your short summary about the commit").
 Также можно открыть текстовый редактор в терминале для написания полного сообщения коммита. Оно может состоять из нескольких строк текста, в котором подробно характеризуются изменения, внесённые в репозиторий (git commit).
* git log отображает список последних коммитов в порядке выполнения. Добавив флаг -p, можно подробно изучить изменения, внесённые в каждый файл.
* git mv позволяет переместить файл или папку. Для него указывается источник source и назначение destination (git mv dir1/somefile.js dir2). При выполнении команды файл или папка, указанные как источник, будут перемещены в папку назначения.
* git commit --amend позволяет внести изменения в последний коммит (git commit --amend -m "Updated message for the previous commit")
* git revert откатит последний коммит.  Создастся новый коммит, содержащий обратные преобразования относительно предыдущего, и добавится к истории текущей ветки (git revert HEAD). Откатить проект до заданного коммита можно с помощью параметра revert и идентификатора коммита (git revert 1af17e).
* git branch new_branch_name создает новую    ветки.
* git checkout branch_name переход на конкретную ветку.
* git checkout -b new_branch_name создает новую ветку и переходит в нее.
* git push -u origin new_branch передает новую ветку в удалённый репозиторий.
* git branch показывает полный список веток. Можно вывести список удалённых веток с помощью флага -a (git branch -a).
* git branch -d existing_branch_name - локальное удаление ветки после слияния с основной.
* git branch -D existing_branch_name - принудительное локальное удаления ветки.
* git push origin --delete existing_branch_name - удаление ветки на удлаленном репозитории.
* git merge existing_branch_name - объединяет указанную ветку с основной.
* git merge --no-ff existing_branch_name - объединяет указанную ветку с основной и создает коммит слияния.
* git merge --abort прерывает слияние в случае конфликта.
* git reset  восстанавливает конфликтующие файлы до стабильного состояния.
* git remote add awesomeapp https://github.com/someurl.. добавит удалённый репозиторий.
* git remote show origin позволяет получить подробные сведения об удалённом репозитории:  список веток, связанных с удалённым репозиторием, а также рабочих станций, подключённых для получения и отправки файлов.
* git push origin main отправляет изменения в удалённый репозиторий.
* git pull скачивает копию текущей ветки с указанного удалённого репозитория и объединяет её с локальной копией.
* git pull --verbose позволяет просмотреть подробные сведения о загруженных файлах.
* git merge origin слияние удалённого репозитория с локальным.
* git rebase branch_name объединения или перемещения последовательности коммитов на свежую вершину (head) ветки branch_name.
* git clean используется для удаления мусора из рабочего каталога. Это могут быть результаты сборки проекта или файлы конфликтов слияний.
* git blame file_name выводит все изменения с основной информацией по ним
* git restore file_name удаляет со understaged
* git restore --staged удаляет со staged
* git add . , git stash push -"спрячет" изменения в "заначку" (stash). Stash организован в виде стека - последнее спрятанное туда изменение, будет доставаться оттуда первым.
* git checkout main , git pull , git branch <new-branch-name> main, git checkout <new-branch-name> - это вытянуть самое свежее состояние main ветки, и создать от нее новую new-branch-name ветку, переключиться на нее.
* git stash pop - достает из заначки (stash) запомненные изменения.

Стандартный алгоритм:
1. git checkout main - переходим на главную ветку
2. git pull - подгружаем последние изминения с удаленного сервера
3. git checkout -b feature/212123_learning_git -  создаем новую ветку и переходим в нее
4. Виполняем текущую задачу
5. git add. - добавляем все файлы в область подготовленных файлов
6. git commit -m "212123: test changes" - добавляем коммиты изменений
7. git status - проверяет статус изменений (не обязательно)
8. git push --set-upstream origin feature/212123_learning_git - создаем удаленно ветку и отправляем изменения

Если нужно смержить с главной ветки измнения, внесенные в нее параллельно с работой на рабочей ветке:
1. git checkout main - перейти на главную ветку
2. git pull - подгрузить изменения
3. git checkout - - перейти на предыдущую (рабочую) ветку
4. git merge main - смержить изменения с главной ветки на рабочую
5. проверить корректность работы прогграммы

Если забыла пропулить main и еще не пушила изменения:
1. git add . - добавить все файлы в область подготовленных файлов
2. git stash push - отправить изменения в стек
3. git checkout main - переключиться на main
4. git pull - подтянуть свежие изменения из удаленного репозитория
5. git checkout - - переключиться на предыдущую ветку
6. git stash pop - достать изменения из стека

Если забыла пропулить main и запушила изменения, то после освежения мейна нужно влить самый свежий мейн в
свою новую ветку через мерж
git checkout my_next_exercise
git merge main
Если возникнет конфликт:
git merge conflict resolution intellij
